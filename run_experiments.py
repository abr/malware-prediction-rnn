from experiments import Experiment, Configs, RNN, increase_gaps
import numpy as np
from useful import *

# Load training data
train_data = np.loadtxt("train.txt", delimiter = ",") 
x_train, y_train = timestamped_to_vector(train_data, timestamp_col=0, time_start=1, classification_col=2)

# random search 
# thresholding = True with value of 0.5 means any fold scoring less than 0.5 accuracy 
expt = Experiment.Experiment(Configs.get_all(), folds=10, search_algorithm="random",
   data=(x_train,y_train), folder_name="random_search", thresholding=True, threshold=0.5)
expt.run_experiments(num_experiments=400)

# run configurations A, B, and C for 1 to 30 time steps
A_B_C = Configs.get_A_B_C()
for config in A_B_C:
	params = A_B_C[config]
	params["sequence_length"] = list(range(1,31))

	expt = Experiment.Experiment(params, 
		search_algorithm="grid",
		x_test=x_test, y_test=y_test,
		x_train=x_train, y_train=y_train, 
   		folder_name="one_to_thirty_config_{}".format(config)
   		)
	expt.run_experiments()

# Increase snapshot intervals
x = itertools.chain(x_train, x_test)
y = itertools.chain(y_train, y_test)

params = Configs.get_A()
params["sequence_length"] = list(range(1,31)) # total real time length
params["step"] = [1,2,3,4,5] # snapshot intervals (s)

increase_snap_expt = Experiment.Increase_Snaphot_Experiment(params, search_algorithm="grid",
    data=(x, y), folds=10, folder_name="increase_intervals", thresholding=False)
increase_snap_expt.run_experiments()

# Ensemble model 
###### Change batch size for parallelisation


# Time step ensemble model



# Leave out training data



# Leave out test data


