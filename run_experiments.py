import numpy as np
from copy import deepcopy
from experiments.useful import timestamped_to_vector
from experiments import Experiments, Configs, RNN

# Load data
#	test data
train_data = np.loadtxt("data/train.txt", delimiter = ",") 
x_train, y_train = timestamped_to_vector(train_data, timestamp_col=0, time_start=1, classification_col=2)
#	test 
test_data = np.loadtxt("data/test.txt", delimiter = ",") 
x_test, y_test = timestamped_to_vector(test_data, timestamp_col=0, time_start=1, classification_col=2)
#	all data 
x = np.concatenate((x_train, x_test))
y = np.concatenate((y_train, y_test))

# random search 
expt = Experiments.Experiment(Configs.get_all(), folds=10, search_algorithm="random",
   data=(x_train, y_train), folder_name="random_search", thresholding=True, threshold=0.5)
expt.run_experiments(num_experiments=400)

# Config A with separate test set
params_A = Configs.get_A()
params_A["sequence_length"] = list(range(1,31)) # total real time length

expt = Experiments.Experiment(params_A, 
	search_algorithm="grid",
	x_test=x_test, y_test=y_test,
	x_train=x_train, y_train=y_train, 
		folder_name="test_train")
expt.run_experiments()


# run configurations A, B, and C for 1 to 30 time steps
A_B_C = Configs.get_A_B_C()
for config_description in A_B_C:
	params = A_B_C[config_description]
	params["sequence_length"] = list(range(1,31))

	expt = Experiments.Experiment(params, 
		search_algorithm="grid",
		data=(x_train, y_train),
		folds=10,
   		folder_name="one_to_thirty_config_{}".format(config_description)
   		)
	expt.run_experiments()


# Increase snapshot intervals - run_on_factors will only run model if sequence_length % step_size == 0
params_A["step"] = [1,2,3,4,5] # snapshot intervals (s)

increase_snap_expt = Experiments.Increase_Snaphot_Experiment(params_A, search_algorithm="grid",
    data=(x, y), folds=10, folder_name="increase_intervals", thresholding=False, run_on_factors=True)
increase_snap_expt.run_experiments()


# Ensemble model 
ensemble_config = Experiments.Ensemble_configurations(list(A_B_C.values()),
    data=(x, y), folds=10, folder_name="ensemble_ABC", batch_size=58)
ensemble_config.run_experiments()


# Time step ensemble model
params_A["step"] = [1]
ensemble_sub_seq = Experiments.Ensemble_sub_sequences(params_A,
    data=(x, y), folds=10, folder_name="ensemble_sub_sequence")
ensemble_sub_seq.run_experiments()


# Leave out test data
for config_description in A_B_C:
	params = A_B_C[config_description]
	params["sequence_length"] = [4,8,16]
	omit_test = Experiments.Omit_test_data(params,
		data=(x, y), folds=10, folder_name="omit_test_config_{}".format(config_description))
	omit_test.run_experiments()


# Leave out training data
for config_description in A_B_C:
	params = A_B_C[config_description]
	params["sequence_length"] = [4,8,16]
	params["leave_out_feature"] = list(range(11))

	expt = Experiments.Experiment(params, 
		search_algorithm="grid",
		data=(x, y), folds=10,
   		folder_name="leave_out_training_{}".format(config_description)
   		)
	expt.run_experiments()