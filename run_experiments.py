import numpy as np
from copy import deepcopy
from experiments.useful import timestamped_to_vector
from experiments import Experiments, Configs, RNN

# Load data
#	test data
train_data = np.loadtxt("data/train.txt", delimiter = ",") 
x_train, y_train = timestamped_to_vector(train_data, timestamp_col=0, time_start=1, classification_col=2)
#	test 
test_data = np.loadtxt("data/test.txt", delimiter = ",") 
x_test, y_test = timestamped_to_vector(test_data, timestamp_col=0, time_start=1, classification_col=2)

# random search of hyperparameters
expt = Experiments.Experiment(Configs.get_all(), folds=10, search_algorithm="random",
   data=(x_train, y_train), folder_name="random_search", thresholding=True, threshold=0.5)
expt.run_experiments(num_experiments=150)

# Config A with separate test set
params_A = Configs.get_A()
params_A["sequence_length"] = list(range(1,21)) # total real time length

expt = Experiments.Experiment(params_A, 
	search_algorithm="grid",
	x_test=x_test, y_test=y_test,
	x_train=x_train, y_train=y_train, 
		folder_name="test_train")
expt.run_experiments()

# run configurations A, B, and C for 1 to 20 time steps
A_B_C = Configs.get_A_B_C()
for config_description in A_B_C:
	A_B_C[config_description]["sequence_length"] = list(range(1,21))

# Ensemble model 
ensemble_config = Experiments.Ensemble_configurations(list(A_B_C.values()),
    x_test=x_test, y_test=y_test,
	x_train=x_train, y_train=y_train, 
	folds=10, folder_name="ensemble_ABC", batch_size=64
)
ensemble_config.run_experiments()

# Leave out test data
for config_description in A_B_C:
	params = A_B_C[config_description]
	params["sequence_length"] = [4]
	omit_test = Experiments.Omit_test_data(params,
		x_test=x_test, y_test=y_test,
		x_train=x_train, y_train=y_train, 
		folds=10, folder_name="omit_test_data_{}".format(config_description))
	omit_test.run_experiments()


