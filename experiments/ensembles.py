import RNN
import increase_gaps # NOT Experiment.py! 
import Experiment
import ensemble_steps
from keras import datasets
from keras.utils import to_categorical
import numpy as np
import decimal
import time
from itertools import chain
from useful import *
from Configs import *
from copy import deepcopy
import random 
random.seed(11)

# Load data and split into x and y
data = np.loadtxt("80%.txt", delimiter = ",") 
x, y = timestamped_to_vector(data, timestamp_col=0, time_start=1, classification_col=2)
test = np.loadtxt("20%.txt", delimiter = ",") 
x_test, y_test = timestamped_to_vector(test, timestamp_col=0, time_start=1, classification_col=2)

def generate_model(x,y,params):
    rnn = RNN.RecurrentModel(x,y,params)
    return rnn.get_model()

# Ensemble of model configs
for params in [get_B()]:
	
	params["sequence_length"] = list(range(1, 11))
	print("Config", params["description"][0])

	expt = Experiment.Experiment(generate_model, params, search_algorithm="grid",
	    data=(x, y), folds=10, folder_name="ensemble_configs_some_10_{}".format(params["description"][0]), thresholding=False)
	expt.run_experiments()
	
	expt = Experiment.Experiment(generate_model, params, search_algorithm="grid",
	    x_train=x, y_train=y, x_test=x_test, y_test=y_test, folder_name="ensemble_configs_some_TT_{}".format(params["description"][0]), thresholding=False)
	expt.run_experiments()
	
for params in [get_A(), get_B()]:
	if params["description"][0] == "A":
		expt = ensemble_steps.Experiment(generate_model, params, search_algorithm="grid",
		    x_train=x, y_train=y, x_test=x_test, y_test=y_test, folder_name="ensemble_chopping_TT_{}".format(params["description"][0]), thresholding=False)
		expt.run_experiments()

		expt = ensemble_steps.Experiment(generate_model, params, search_algorithm="grid",
		    data=(x, y), folds=10, folder_name="ensemble_chopping_10_{}".format(params["description"][0]), thresholding=False)
		expt.run_experiments()
	
	

# Ensemble of model time steps



